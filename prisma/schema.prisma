// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WRITER
  USER
}

enum AccessType {
  PUBLIC
  PRIVATE
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @default(USER)
  books     Book[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Book {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  author    String
  accesType AccessType @default(PUBLIC)
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  pages     Page[]
  reviews   Review[]
  Like      Like[]

  @@map("books")
}

model Page {
  id        Int      @id @default(autoincrement())
  message   String
  pageNo    Int
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pages")
}

model Review {
  id        Int      @id @default(autoincrement())
  review    String
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  bookId Int
  book   Book @relation(fields: [bookId], references: [id])

  @@map("likes")
}
